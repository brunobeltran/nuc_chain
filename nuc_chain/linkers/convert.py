from .. import * # default parameters
from .. import geometry as ncg
import numpy as np
import pandas as pd

def links_from_dyad_locations(filename, w_ins=default_w_in, w_outs=default_w_out,
                                        helix_params=helix_params_best, unwraps=None):
    """Extract linker lengths from a list of dyad locations generated by Bruno's
    nucleosome positioning code. Calculate gprops for these linkers and save.

    Parameters
    ----------
    filename : str, pathlib.Path
        file name or path to csv file with 2 columns: 'nucleosome rank', 'dyad location (bp)'
    w_ins : float or (L+1,) array_like
        amount of DNA wrapped on entry side of central dyad base in bp
    w_outs : float or (L+1,) array_like
        amount of DNA wrapped on exit side of central dyad base in bp
    unwraps: float or (L+1,) array-like
        total amount of DNA unwrapped on both sides of nucleosome in bp

    Returns
    -------
    links : (L,) array-like
        set of bare linker lengths, one for each row in inputted csv
    """

    df = pd.read_csv(filename, header=0, names=['nuc', 'dyad_location'])
    b = helix_params['b']
    num_linkers = df.shape[0] #rows give dyad positions
    w_ins, w_outs = ncg.resolve_wrapping_params(unwraps, w_ins, w_outs, num_linkers+1)
    # calculate unwrapping amounts based on w_ins and w_outs
    mu_ins = (b - 1)/2 - w_ins
    mu_outs = (b - 1)/2 - w_outs

    links = np.zeros((num_linkers,))
    dyad_to_dyad_distances = np.diff(df.dyad_location)

    for i, dyad_to_dyad in enumerate(dyad_to_dyad_distances):
        #bare linker length is dyad_to_dyad distance minus wrapped and unwrapped amounts
        links[i] = dyad_to_dyad - w_outs[i] - mu_outs[i] - mu_ins[i+1] - w_ins[i+1]

    return links


def genomic_length_from_links_unwraps(links, w_ins=default_w_in, w_outs=default_w_out,
                            helix_params=helix_params_best, unwraps=None):
    """Returns cumulative chain length as a function of the number of monomers along nucleosome chain,
    where each monomer is dyad-to-dyad and includs the wrapped bp on exit side of first nucleosome,
    unwrapped bp on exit side of first nucleosome, bare linker, unwrapped bp on entry side of second
    nucleosome, and wrapped bp on entry side of second nucleosome.

    Parameters
    ----------
    links : (L,) array-like
        linker length in bp
    w_ins : float or (L+1,) array_like
        amount of DNA wrapped on entry side of central dyad base in bp
    w_outs : float or (L+1,) array_like
        amount of DNA wrapped on exit side of central dyad base in bp
    unwraps: float or (L+1,) array-like
        total amount of DNA unwrapped on both sides of nucleosome in bp

    Returns
    -------
    ldna : (L,) array-like
        cumulative length of chain in genomic distance (including wrapped and unwrapped bp)
    """
    b = helix_params['b']
    num_linkers = len(links)
    w_ins, w_outs = ncg.resolve_wrapping_params(unwraps, w_ins, w_outs, num_linkers+1)
    # calculate unwrapping amounts based on w_ins and w_outs
    mu_ins = (b - 1)/2 - w_ins
    mu_outs = (b - 1)/2 - w_outs
    ldna = np.zeros_like(links).astype('float')
    ldna[0] = w_outs[0] + mu_outs[0] + links[0] + mu_ins[1] + w_ins[1]
    for i in range(1, num_linkers):
        ldna[i] = ldna[i-1] + w_outs[i] + mu_outs[i] + links[i] + mu_ins[i+1] + w_ins[i+1]
    return ldna

def Rmax_from_links_unwraps(links, w_ins=default_w_in, w_outs=default_w_out,
                            helix_params=helix_params_best, unwraps=None):
    """Returns cumulative length of linkers (including unwrapping) as a function of
    the number of monomers along nucleosome chain.

    Parameters
    ----------
    links : (L,) array-like
        linker length in bp
    w_ins : float or (L+1,) array_like
        amount of DNA wrapped on entry side of central dyad base in bp
    w_outs : float or (L+1,) array_like
        amount of DNA wrapped on exit side of central dyad base in bp
    unwraps: float or (L+1,) array-like
        total amount of DNA unwrapped on both sides of nucleosome in bp

    Returns
    -------
    Rmax : (L,) array-like
        cumulative length of linkers in bp
    """
    b = helix_params['b']
    num_linkers = len(links)
    w_ins, w_outs = ncg.resolve_wrapping_params(unwraps, w_ins, w_outs, num_linkers+1)
    # calculate unwrapping amounts based on w_ins and w_outs
    mu_ins = (b - 1)/2 - w_ins
    mu_outs = (b - 1)/2 - w_outs
    Rmax = np.zeros_like(links).astype('float')
    Rmax[0] = mu_outs[0] + links[0] + mu_ins[1]
    for i in range(1, num_linkers):
        Rmax[i] = Rmax[i-1] + mu_outs[i] + links[i] + mu_ins[i+1]
    return Rmax
