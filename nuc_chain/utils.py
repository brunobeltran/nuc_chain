# -*- coding: utf-8 -*-
r"""Decorator functions for WLC fluctuations module

Implements useful caching functions to save propogators and minimize extra calculations.
"""

import numpy as np
import pickle
from pathlib import Path

def cache_pickle(f):
    """Decorator that automatically caches the output of a function into a
    file named after the function. The file is just a pickled version of the
    dictionary generated by the :py:func:`cache` function.

    .. warning::
        only makes sense when applied to pure functions!

    .. warning::
        doesn't recheck if it should load in a new pickle file at each usage
        for speed, so if this is used on a function that is run in parallel
        that is not already well-cached, it will likely not prevent the repeat
        work.

    .. warning::
        triggers a re-write of the entire pickle file at each new set of parameters

    """
    name_of_function_f_as_string = f.__name__
    my_file = Path(f'csvs/{name_of_function_f_as_string}.p')
    def f_prime(*args, **kwargs):
        if args not in f_prime.cache:
            f_prime.cache[args] = f(*args, **kwargs)
            pickle.dump(f_prime.cache, open(f'csvs/{name_of_function_f_as_string}.p', 'wb'))
        return f_prime.cache[args]

    if my_file.is_file():
        f_prime.cache = pickle.load(open(f'csvs/{name_of_function_f_as_string}.p', 'rb'))
    else:
        f_prime.cache = {}

    return f_prime

def cache(f):
    """Decorator that automatically caches the output of a function into an
    in-memory dictionary that has as keys the *args tuple used for that
    function call.

    .. warning::
        only makes sense when applied to pure functions!

    """
    def f_prime(*args, **kwargs):
        if args not in f_prime.cache:
            f_prime.cache[args] = f(*args, **kwargs)
        return f_prime.cache[args]
    f_prime.cache = {}
    return f_prime
